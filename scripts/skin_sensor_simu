#!/usr/bin/env python
import rospy
from dynamic_graph_bridge_msgs.msg import Vector
#from cellularskin_msgs.msg import SkinPatch
from dynamic_graph.sot.core.utils.thread_interruptible_loop import loopInThread,loopShortcuts
from visualization_msgs.msg import Marker
import time


list_links = ['r_forerarm_skin_link_101','r_forerarm_skin_link_111', 'r_forerarm_skin_link_83', 'r_forerarm_skin_link_87', 'r_forerarm_skin_link_14','r_forerarm_skin_link_28', 'r_forerarm_skin_link_30', 'r_forerarm_skin_link_47', 'r_forerarm_skin_link_59', 'r_forerarm_skin_link_62', 'r_forerarm_skin_link_82']


def cyl_marker():
	marker_cylinder = Marker()
	marker_cylinder.header.frame_id = 'world'
	#marker_cylinder.header.stamp = rospy.Time.now()
	marker_cylinder.type = marker_cylinder.CYLINDER
	marker_cylinder.action = marker_cylinder.ADD
	marker_cylinder.scale.x = 0.06
	marker_cylinder.scale.y = 0.06
	marker_cylinder.scale.z = 0.12
	marker_cylinder.color.a = 1
	marker_cylinder.color.r = 1
	marker_cylinder.color.g = 0.5
	marker_cylinder.color.b = 0.4
	marker_cylinder.lifetime.secs = 0
	marker_cylinder.pose.orientation.w = 1.0
	marker_cylinder.pose.position.x = 0
	marker_cylinder.pose.position.y = 0
	marker_cylinder.pose.position.z = 0
        return marker_cylinder






class proximity_range_bridge:
    def __init__(self):
        rospy.init_node('proximity_range_bridge', anonymous=True)
        self.proximity_vector = Vector()
        self.cyl = cyl_marker()
        self.proximity_vector.data = [0.2,] *11
        self.pub = rospy.Publisher('proximity_data', Vector, queue_size=10)
        self.cyl_pub = rospy.Publisher('object_cylinder', Marker, queue_size=10)
        self.rate = rospy.Rate(10) # 10hz
       
    def run(self):
        self.proximity_vector.data 
        self.pub.publish(self.proximity_vector)
        self.cyl_pub.publish(self.cyl)
 	self.rate.sleep()


# Controller Thread

prb = proximity_range_bridge()


@loopInThread
def pub():
    prb.run()


runner=pub()
runner.once()
[go,stop,next,n]=loopShortcuts(runner)




def cyl1_check():
	error = 0.4
	prb.proximity_vector.data = [0.2,] *11
	prb.cyl.header.frame_id = 'world'
	prb.cyl.pose.position.z = 0
	temp = prb.proximity_vector.data
	while (error >0.03):
		error-= 0.01
		prb.cyl.header.frame_id = list_links[0]
                if error > 0.04:
		   prb.cyl.pose.position.z = error+(prb.cyl.scale.z/2)
                if error < 0.2:
		   temp[0] = error
		prb.proximity_vector.data = temp
		time.sleep(0.1)
                #print prb.proximity_vector.data
        time.sleep(2)
        prb.cyl.header.frame_id = 'world'
        prb.cyl.pose.position.z = 0
        prb.proximity_vector.data = [0.2,] *11


def cyl_check():
    for i in range(11):
        time.sleep(4)
        error = 0.2
        prb.proximity_vector.data = [error,] *11
        prb.cyl.header.frame_id = 'world'
	prb.cyl.pose.position.z = 0
        time.sleep(3)
        temp = prb.proximity_vector.data
        while (error >0.03):
                error-= 0.01
		prb.cyl.header.frame_id = list_links[i]
		prb.cyl.pose.position.z = error+(prb.cyl.scale.z/2)
		temp[i] = error
		prb.proximity_vector.data = temp
                time.sleep(0.1)
                #print prb.proximity_vector.data
		


def slowupanddown():
    error = 0.14
    for i in range(15): 
    	prb.proximity_vector.data = [error,] *11
        error = error + 0.01
        time.sleep(1)
        print prb.proximity_vector.data
    for j in range(20): 
    	prb.proximity_vector.data = [error,] * 11
        error = error - 0.01
        print prb.proximity_vector.data
        time.sleep(0.3)
        




